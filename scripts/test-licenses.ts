import { PrismaClient, LicenseType, LicenseStatus, OrderStatus, PaymentStatus } from '@prisma/client'

const prisma = new PrismaClient()

async function testLicenses() {
  try {
    console.log('üß™ Test des nouvelles tables de licences...\n')

    // 1. R√©cup√©rer un utilisateur et un template
    const user = await prisma.user.findFirst({
      where: { email: 'user@templatestore.com' }
    })
    
    const template = await prisma.template.findFirst({
      where: { slug: 'modern-ecommerce' }
    })

    if (!user || !template) {
      console.log('‚ùå Utilisateur ou template non trouv√©')
      return
    }

    console.log(`üë§ Utilisateur: ${user.email}`)
    console.log(`üì¶ Template: ${template.title}\n`)

    // 2. Cr√©er une commande de test
    console.log('üì¶ Cr√©ation d\'une commande de test...')
    const testOrder = await prisma.order.create({
      data: {
        userId: user.id,
        stripeSessionId: 'test-session-123',
        stripePaymentIntentId: 'test-payment-123',
        amount: template.price,
        currency: 'EUR',
        status: OrderStatus.COMPLETED,
        paymentStatus: PaymentStatus.SUCCEEDED
      }
    })

    console.log(`‚úÖ Commande cr√©√©e: ${testOrder.id}\n`)

    // 3. Cr√©er une licence personnelle
    console.log('üìã Cr√©ation d\'une licence personnelle...')
    const personalLicense = await prisma.license.create({
      data: {
        userId: user.id,
        templateId: template.id,
        orderId: testOrder.id,
        type: LicenseType.PERSONAL,
        status: LicenseStatus.ACTIVE,
        maxDownloads: 3,
        downloadLimit: 1,
        validFrom: new Date(),
        validUntil: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 an
        metadata: {
          purchaseMethod: 'test',
          notes: 'Licence de test'
        }
      }
    })

    console.log(`‚úÖ Licence cr√©√©e: ${personalLicense.id}`)
    console.log(`   Type: ${personalLicense.type}`)
    console.log(`   Statut: ${personalLicense.status}`)
    console.log(`   T√©l√©chargements max: ${personalLicense.maxDownloads}`)
    console.log(`   Valide jusqu'au: ${personalLicense.validUntil.toLocaleDateString()}\n`)

    // 4. Cr√©er un enregistrement de t√©l√©chargement
    console.log('üì• Cr√©ation d\'un enregistrement de t√©l√©chargement...')
    const download = await prisma.download.create({
      data: {
        licenseId: personalLicense.id,
        userId: user.id,
        templateId: template.id,
        downloadToken: 'test-token-123',
        downloadUrl: 'https://drive.google.com/file/d/test123/view',
        ipAddress: '127.0.0.1',
        userAgent: 'Test Browser',
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24h
        isExpired: false
      }
    })

    console.log(`‚úÖ T√©l√©chargement cr√©√©: ${download.id}`)
    console.log(`   Token: ${download.downloadToken}`)
    console.log(`   Expire le: ${download.expiresAt.toLocaleDateString()}\n`)

    // 5. Mettre √† jour le compteur de t√©l√©chargements
    console.log('üîÑ Mise √† jour du compteur de t√©l√©chargements...')
    const updatedLicense = await prisma.license.update({
      where: { id: personalLicense.id },
      data: {
        downloadsCount: {
          increment: 1
        }
      }
    })

    console.log(`‚úÖ Licence mise √† jour: ${updatedLicense.downloadsCount}/${updatedLicense.maxDownloads} t√©l√©chargements\n`)

    // 6. R√©cup√©rer les licences de l'utilisateur
    console.log('üîç R√©cup√©ration des licences de l\'utilisateur...')
    const userLicenses = await prisma.license.findMany({
      where: { userId: user.id },
      include: {
        template: {
          select: {
            title: true,
            slug: true
          }
        },
        downloads: {
          select: {
            downloadedAt: true,
            expiresAt: true
          }
        }
      }
    })

    console.log(`‚úÖ ${userLicenses.length} licence(s) trouv√©e(s):`)
    userLicenses.forEach(license => {
      console.log(`   üìã ${license.template.title} (${license.type})`)
      console.log(`      T√©l√©chargements: ${license.downloadsCount}/${license.maxDownloads}`)
      console.log(`      Statut: ${license.status}`)
      console.log(`      ${license.downloads.length} t√©l√©chargement(s) enregistr√©(s)`)
    })

    // 7. V√©rifier les relations
    console.log('\nüîó Test des relations...')
    const templateWithLicenses = await prisma.template.findUnique({
      where: { id: template.id },
      include: {
        licenses: {
          include: {
            user: {
              select: { email: true }
            }
          }
        },
        downloadRecords: {
          include: {
            user: {
              select: { email: true }
            }
          }
        }
      }
    })

    if (templateWithLicenses) {
      console.log(`‚úÖ Template "${templateWithLicenses.title}":`)
      console.log(`   ${templateWithLicenses.licenses.length} licence(s) active(s)`)
      console.log(`   ${templateWithLicenses.downloadRecords.length} t√©l√©chargement(s) enregistr√©(s)`)
    }

    console.log('\nüéâ Tests termin√©s avec succ√®s !')

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter les tests
testLicenses()
